[{"content":"","date":null,"permalink":"/","section":"","summary":"","title":""},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/debugger/","section":"Tags","summary":"","title":"debugger"},{"content":"List of bad chars # Useful during exploit developement to detect bad chars.\nNote.: I excluded the \\x00 byte usually considered as bad chars for copy operations like memcpy. The byte range goes \\x01 to\\xFF.\nbadchars = ( b\u0026#34;\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\u0026#34; b\u0026#34;\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\u0026#34; b\u0026#34;\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\u0026#34; b\u0026#34;\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\u0026#34; b\u0026#34;\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\u0026#34; b\u0026#34;\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\u0026#34; b\u0026#34;\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\u0026#34; b\u0026#34;\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\u0026#34; b\u0026#34;\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\u0026#34; b\u0026#34;\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\u0026#34; b\u0026#34;\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\u0026#34; b\u0026#34;\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\u0026#34; b\u0026#34;\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\u0026#34; b\u0026#34;\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\u0026#34; b\u0026#34;\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\u0026#34; b\u0026#34;\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\u0026#34;) ","date":"4 May 2024","permalink":"/posts/postsec/detect_badchars/","section":"Posts","summary":"List of bad chars # Useful during exploit developement to detect bad chars.","title":"Detect Bad Chars Exploit Development"},{"content":"","date":null,"permalink":"/tags/exploitdev/","section":"Tags","summary":"","title":"ExploitDev"},{"content":"","date":null,"permalink":"/posts/postsec/","section":"Posts","summary":"","title":"Offensive Security Posts"},{"content":"","date":null,"permalink":"/categories/offensivesecurity/","section":"Categories","summary":"","title":"OffensiveSecurity"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/concept/","section":"Tags","summary":"","title":"concept"},{"content":"I found an exellent post on stackoverflow explaining the differences between opcode, bytecode, mnemonic, machine code and assembly.\nOriginal link: \u0026lsquo;StackOverFlow Link\u0026rsquo;\nOPCODE # It is a number interpreted by your machine(virtual or silicon) that represents the operation to perform\nBYTECODE # Same as machine code, except, its mostly used by a software based interpreter(like Java or CLR)\nMNEMONIC # English word MNEMONIC means \u0026ldquo;A device such as a pattern of letters, ideas, or associations that assists in remembering something.\u0026rdquo;. So, its usually used by assembly language programmers to remember the \u0026ldquo;OPERATIONS\u0026rdquo; a machine can do, like \u0026ldquo;ADD\u0026rdquo; and \u0026ldquo;MUL\u0026rdquo; and \u0026ldquo;MOV\u0026rdquo; etc. This is assembler specific.\nMACHINE CODE # It is the sequence of numbers that flip the switches in the computer on and off to perform a certain job of work - such as addition of numbers, branching, multiplication, etc etc. This is purely machine specific and well documented by the implementers of the processor.\nAssembly # There are two \u0026ldquo;assemblies\u0026rdquo; - one assembly program is a sequence of mnemonics and operands that are fed to an \u0026ldquo;assembler\u0026rdquo; which \u0026ldquo;assembles\u0026rdquo; the mnemonics and operands into executable machine code. Optionally a \u0026ldquo;linker\u0026rdquo; links the assemblies and produces an executable file.\n","date":"19 March 2024","permalink":"/posts/postsec/lowlevel_concept/","section":"Posts","summary":"I found an exellent post on stackoverflow explaining the differences between opcode, bytecode, mnemonic, machine code and assembly.","title":"Low level computer concept"},{"content":"","date":null,"permalink":"/tags/lowlevel/","section":"Tags","summary":"","title":"lowlevel"},{"content":"Using windbg we can check memory permission under Protect field.\n!vprot esp !vprot eip !vprot 00d13000 ","date":"19 March 2024","permalink":"/posts/postsec/windbg_mempermision_cmds/","section":"Posts","summary":"Using windbg we can check memory permission under Protect field.","title":"How to check Memory Permission in Windbg"},{"content":"Command below disable access violation and guard pages in Windbg\nRef.: Windbg Manual\nsxd av // Disable access violation sxd gp // Disable guard pages ","date":"19 March 2024","permalink":"/posts/postsec/windbg_guardpage_cmds/","section":"Posts","summary":"Command below disable access violation and guard pages in Windbg","title":"How to disable access violation/guardpage in windbg"},{"content":"All windbg commands here # Link to windgb manual\nAdd symbol # Go to File -\u0026gt; Symbol Search Path then add the path below\nsrv*c:\\symbols*https://msdl.microsoft.com/download/symbols Load the symbols # Note.: Attach to a process then run the command to load the symbols\n.reload /f Run the program # g Clear windbg screen # .cls Unassemble MNEMONIC instructions # The u command accepts memory address, range of memory address or symbol names. We can use \u0026ldquo;ub\u0026rdquo; command to disassemble by counting backwards.\nu module!function Read data from memory # db esp db 069fdcc db kernel32!WriteFile dw 069fdcc dd 069fdcc dq 069fdcc dW KERNELBASE+0X40 // show ascii value on the right dc KERNELBASE // show ascii character Control length to be displayed # The default is 0x80 bytes. The L parameter.\ndd esp L4 db esp L10 Display contents of address # sds (double word), dqs (Qword), dps (Pointer sized 4 byte or 8 byte depending on computer archtecture).\ndds esp L10 dds esp-10 L10 Derefence memory using poi # dd poi(esp) Dumping Structures from Memory # Display type the command is dt, the $teb is a pseudo register that provides address of the TEB\ndt ntdll!_TEB dt ntdll!_TEB @$teb ThreadLocalStoragePointer Display nested Structures from Memory # The -r will display nested structures, the $teb is the pseudo register that provides the address of the TEB\ndt -r ntdll!_TEB @$teb Calculate size of structure # ?? sizeof(ntdll!_TEB) Writing a value to Memory # We can use the edit command followed by size (similar to the display command).\ned esp 41414141 // we are writing a dword to esp ( 4 bytes ) ed esp 41414141 ea esp \u0026#34;Hello\u0026#34; // we can modify ascii values using ea, we write Hello to esp eu esp Address \u0026#34;String\u0026#34; // we can modify to unicode value using eu, we write to esp. Searching the memory space # The -d meanins dword memory address, 0 means beginning of address the L? Length to search, we enter 80000000 to search and followed by value 41414141. we can search for ascii string using the -a flag as well.\ns -d 0 L?80000000 41414141 s -a 0 L?80000000 \u0026#34;This program cannot be run in DOS mode\u0026#34; // this earch for the ascii string via -a flag Inspecting and Editing CPU Register in WinDbg # We can use \u0026ldquo;r\u0026rdquo; command to display all register or individual register. We can use \u0026ldquo;r\u0026rdquo; to modify register values\nr // list all register r ecx // list only ecx r ecx=41414141 // This edit ecx with value of 41414141 Software BreakPoints # bp kernel32!WriteFile bl // list the breakpoints g // let execution run Disable/Enable BreakPoints # bd \u0026lt;number\u0026gt; // Disable Breakpoints, get the number with bl be \u0026lt;number\u0026gt; // Enable Breakpoints, get the number with bl Clear/Delete BreakPoints # bc \u0026lt;number\u0026gt; // clear specific breakpoints bc * to clear all breakpoints Unresolved Function Breakpoints # Function not loaded in process memory and it has not been resolved.\nbu ole32!WriteStringStream Breakpoint-Based Actions # The command below break and print number of bytes from WriteFile function, %p display given value as a pointer.\nbp kernel32!WriteFile \u0026#34;.printf \\\u0026#34;The number of bytes written is: %p\\\u0026#34;, poi(esp + 0x0C); .echo;g\u0026#34; Conditional Breakpoints Actions # Command below breaks if number of bytes written is 4 otherwise continue execution.\nbp kernel32!WriteFile \u0026#34;.if (poi(esp + 0x0C) != 4) {gc} .else { .printf \\\u0026#34;The number of bytes written is 4\\\u0026#34;; .echo;}\u0026#34; Hardware Breakpoints # Hardware breakpoints are performed on processor level in the register, x86/x64 have only 4 registers reserved for hardware breakpoints. The access can be: e (execute), r (read), w (write) Example: ba \u0026lt;size_bytes_in_memory\u0026gt; \u0026lt;memory_address\u0026gt;\nba e 1 kernel32!WriteFile ba w 2 00c56330 // we are set hardware breakpoint write access of first 2 bytes on memory address 00c56330 Stepping through the code # We can use p (step over the calls) and t (step into the calls) and pt (go end of the function) and ph ( execute code until branching instruction is reached), This includes conditional or unconditional branches, functions calls and return instructions.\nThe pa \u0026lt;adddress\u0026gt; (step to Address) executes until reaches the specified memory address. Listing Modules and Symbols # We can use lm command do display loaded modules start/end addresses. The deferred for specific modules means no symbols are loaded and .reaload /f can be used to load the symbols.\nlm lm f We can also filter modules with the command below\nlm m kernel* We can learn more about the symbols using the x command, example\nx kernelbase!CreateProc* Windbg as a calculator # Mathematical evaluation is performed using the ? Command. The input is assumed to be in hex format.\n? 77269bc0 - 77231430 // substraction of memory address ? 77269bc0 \u0026gt;\u0026gt; 18 // shifting a address by 18 bytes Data Output Format # by default windbg display result in hexdecimal format. We can conver hex to decimal with 0n prefix or binary to hex with 0xy prefix\n? 0n41414141 // converts 41414141 from hex to decimal format ? 0y1110100110111 // convert binary value to hex and decimal The .formats allow us to convert to all representation at once\n.formats 41414141 // converts 41414141 to all formats Pseudo Registers # windbg has a series of pseudo registers, there are variables pre-defined.\nExample of pseudo registers are $teb contains address of TEB, $t0…$t19 used for mathematical calculation\nWhen using pseudo registers or registers its recommend to prefix them @ character, example @$teb this tells windbg to treat the content as a register or pseudo registers. It speeds the evaluation process because windbg won\u0026rsquo;t try to resolve it as symbols first.\nr @$t0 = (41414141 - 414141) * 0n10 // store the result into pseudo register r @$t0 // display the result ? @$t0 \u0026gt;\u0026gt; 8 // right shift the result to 8 bits Check memory permission # We can check memory permission under Protect field.\n!vprot esp !vprot eip !vprot 00d13000 List stack frame # Using the k command to list the stack frame\nk k2 k3 k4 ","date":"19 March 2024","permalink":"/posts/postsec/windbg_usful_cmds/","section":"Posts","summary":"All windbg commands here # Link to windgb manual","title":"Windbg useful commands"},{"content":"This technique address the need to launch windbg with high privilege to debug processes running with system account privilege.\nYou can run windbg as normal user because we are running via cdb and cdb is running as system privilege.\nCreate a service for the process you want to debug,\nsc.exe create AppServiceDebug binpath= \u0026#34;C:\\Program Files\\Windows Kits\\10\\Debuggers\\x86\\cdb.exe -server tcp:port=50000 C:\\Program Files\\APP\\Debug\\app.exe\u0026#34; Go to windows services, you can run services.msc to open the windows services. Make sure process will run as System Account.\nAfter starting the service, you can open windbg and choose attach to remote process and enter the information below.\nConnection string\ntcp:port=50000 Tips # You have to quickly let windbg to continue with \u0026ldquo;g\u0026rdquo; for the service not to die. To start the service again after crash you need to kill the cdb.exe process and windbg.exe so you don’t need to do it manually.\nExample of command\ntaskkill /F /IM cdb.exe \u0026amp;\u0026amp; taskkill /F /IM windbg.exe ","date":"10 March 2024","permalink":"/posts/postsec/windbg_cdb_attach/","section":"Posts","summary":"This technique address the need to launch windbg with high privilege to debug processes running with system account privilege.","title":"Windbg, the cdb.exe to attach to process  "},{"content":"You can find the Import Address Table of an application and the list of imported functions by attaching Windbg to the process and following the steps below.\nFind the module in windbg # lm Dump the header of the module # !dh \u0026lt;module_address\u0026gt; -f The result of !df look for Import Address Table Directory which will contain the offset vaule and the size.\nUse the IAT offset and size of IAT as follow to list the imported functions # dps \u0026lt;module_address\u0026gt;+\u0026lt;IAT_offset_address\u0026gt; \u0026lt;module_address\u0026gt;+\u0026lt;IAT_offset_address\u0026gt;+\u0026lt;sizeof_IAT\u0026gt; Reference: tom\u0026rsquo;s reversing viewing imports\n","date":"10 March 2024","permalink":"/posts/postsec/windbg_iat/","section":"Posts","summary":"You can find the Import Address Table of an application and the list of imported functions by attaching Windbg to the process and following the steps below.","title":"Find IAT using Windbg"},{"content":"","date":null,"permalink":"/tags/windowsinternal/","section":"Tags","summary":"","title":"WindowsInternal"},{"content":"","date":null,"permalink":"/tags/kali/","section":"Tags","summary":"","title":"Kali"},{"content":"","date":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux"},{"content":"My notes on some of useful tty commands # Color when listing files # export TERM=xterm-256-color alias ll=\u0026#39;ls -lsahta --color=auto\u0026#39; Run: ll Get interactive shell zsh shell // new kalli version working # python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; CTRL + Z stty raw -echo; fg enter export TERM=xterm-256color export SHELL=bash export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp stty rows X columns Y // get rows and columns info: stty -a Get interactive shell fully working (old version kali, not using zsh). # ps -p $$ // check which if you are using bash, new version of kali uses zsh shells, it wont work. exec bash --login // if command above returned zsh, change to bash. After using one of the methods, run below for tty # crtz+z // on your keyboard run: stty raw -echo // kali , if you run under zsh run on one line: stty raw -echo; fg run: fg // kali hit enter // target export TERM=xterm // target export SHELL=bash export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp stty rows X columns Y // get rows and columns info: stty -a fix terminal exiting from the shell # reset tty that work most of the time # /usr/bin/script -qc /bin/bash /dev/null /usr/bin/script -qc /bin/sh /dev/null Python2 tty # The sh shell version\npython -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/sh\u0026#34;)\u0026#39; The bash shell version\npython -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; python3 tty # python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; ","date":"10 March 2024","permalink":"/posts/postsec/tty_shell/","section":"Posts","summary":"My notes on some of useful tty commands # Color when listing files # export TERM=xterm-256-color alias ll=\u0026#39;ls -lsahta --color=auto\u0026#39; Run: ll Get interactive shell zsh shell // new kalli version working # python3 -c \u0026#39;import pty; pty.","title":"TTY shells"},{"content":"Narly is a plugin that parses the image and identifies the binary protections mechanisms enabled such as DEP, ASLR, SafeSEH and GS.\nVery useful during exploit development.\nCan be downloaded here narly\nHow to use # Note.: after narly is compiled copy the narly.dll in windbg winext directory.\nExample:\nC:\\Program Files\\Debugging Tools for Windows (x86)\\winext Loading the plugin:\n.load narly Running narly in windbg:\n!nmod ","date":"9 March 2024","permalink":"/posts/postsec/narly_windbg/","section":"Posts","summary":"Narly is a plugin that parses the image and identifies the binary protections mechanisms enabled such as DEP, ASLR, SafeSEH and GS.","title":"Narly plugin for windbg"},{"content":"","date":null,"permalink":"/tags/reverseeng/","section":"Tags","summary":"","title":"ReverseEng"},{"content":"The Import Address Table stores information about the loaded modules imported by the current running processs.\nThe IAT is important during reverse engineering process to identify functions been used by the application and therefore understand better the application functionality and capabilities, its possible to understand the application behaviour by reviewing the IAT and looking for functions commonly used by malware.\nExploit developer perspective the IAT is important to identiy weak/vulnerable functions used by the application, after idenfiying the vulnerable function the exploit developer will attempt to reach the vulnerable function by manipulating the network packet or file format.\nBelow is an example of dependecy walker loaded with notepad.exe. We can see functions and modules used by notepad.exe We can see the notepad.exe uses kernel32 module and kernelbase as well and multiple functions from these modules. Thank you for reading.\n","date":"9 March 2024","permalink":"/posts/postsec/iat_win/","section":"Posts","summary":"The Import Address Table stores information about the loaded modules imported by the current running processs.","title":"The IAT (Import Address Table)"},{"content":"The rp++ is a ROP Gadget finder used by Exploit Developers to bypass DEP protection.\nOficial link rp++\nYou will need to compile.\nHow to use # Note.: -r means how many assembly instructions, -f the path to the .dll or .exe to extract the gadgets and \u0026gt; to re-direct the results to a file. You can also exclude bad chars with bad chars.\nrp++.exe -r 5 -f \u0026lt;some.dll\u0026gt; \u0026gt; rop_some.dll with new version you can exclude bad characters\nrp++.exe --bad-bytes \u0026#39;\\x00\\x0a\u0026#39; -r 5 -f \u0026lt;some.dll\u0026gt; \u0026gt; rop_some.dll ","date":"9 March 2024","permalink":"/posts/postsec/rp_gadget/","section":"Posts","summary":"The rp++ is a ROP Gadget finder used by Exploit Developers to bypass DEP protection.","title":"The RP++ ROP Finder"},{"content":"The TEB (Thread Environment Block) # Just as PEB contains information about the processs, the TEB has information about the thread running in the processs. A process when created contains at least one thread that execute the desired code, a process can create N Threads.\nEach thread has its own TEB structure, the TEB is often used by exploit developers and malware developers to locate the Pointer to the PEB structure or information about running thread.\nThe TEB is accessed through FS segment register on 32-bit and GS on 64-bit Windows.\ntypedef struct _TEB { PVOID Reserved1[12]; PPEB ProcessEnvironmentBlock; PVOID Reserved2[399]; BYTE Reserved3[1952]; PVOID TlsSlots[64]; BYTE Reserved4[8]; PVOID Reserved5[26]; PVOID ReservedForOle; PVOID Reserved6[4]; PVOID TlsExpansionSlots; } TEB, *PTEB; References: TEB Microsoft TEB Wikipedia\n","date":"9 March 2024","permalink":"/posts/postsec/teb_struct/","section":"Posts","summary":"The TEB (Thread Environment Block) # Just as PEB contains information about the processs, the TEB has information about the thread running in the processs.","title":"The TEB Structure"},{"content":"The PEB (Process Environment Block) # The PEB is a data structure that store information about the running process and can be accessed through intel x86 [FS] register at offset 0x30h.\nThe structure contains useful information such as loaded modules on the running process commonly used during shellcode devolpment to resolve Win32 APIs functions.\nAnother useful information in the PEB structure is BeingDebugged that shows if the running process is been attached to the debugger or not.\nThis feature is often used by malware developers as an anti-debugging technique to increase the difficult of defenders such as Malware Analysts to analyse the malware dynamically using a debugger.\nIf the malware detects that is been debugged the malware could act as completed different to hide true purpose from analysts or delete itself on disk.\nThe Ldr data structure is also important which I will explain later on.\ntypedef struct _PEB { BYTE Reserved1[2]; BYTE BeingDebugged; BYTE Reserved2[1]; PVOID Reserved3[2]; PPEB_LDR_DATA Ldr; PRTL_USER_PROCESS_PARAMETERS ProcessParameters; PVOID Reserved4[3]; PVOID AtlThunkSListPtr; PVOID Reserved5; ULONG Reserved6; PVOID Reserved7; ULONG Reserved8; ULONG AtlThunkSListPtr32; PVOID Reserved9[45]; BYTE Reserved10[96]; PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine; BYTE Reserved11[128]; PVOID Reserved12[1]; ULONG SessionId; } PEB, *PPEB; Reference: Microsoft API PEB Reference\n","date":"9 March 2024","permalink":"/posts/postsec/peb/","section":"Posts","summary":"The PEB (Process Environment Block) # The PEB is a data structure that store information about the running process and can be accessed through intel x86 [FS] register at offset 0x30h.","title":"The PEB Structure"},{"content":"","date":null,"permalink":"/tags/metasploit/","section":"Tags","summary":"","title":"MetaSploit"},{"content":"","date":null,"permalink":"/tags/meterpreter/","section":"Tags","summary":"","title":"Meterpreter"},{"content":"A year ago while testing a https reverse meterpreter shell after a 15 or 30 minutes the meterpreter session would die. After investigating I ensured my reverse payload was not been dectected by the anti-virus, but the issue persisted\nI tried the TCP Meterpreter Shell and that resolved the issue, could be the related to network conditions affecting the HTTPS connection as a result the payload wasn\u0026rsquo;t a good fit for that environment\nLeason learned if a specific payload doesn\u0026rsquo;t work, try a different one\nBut this issue lead me to further investigate and see what could be on my control to improve the connection and I found I could set the following parameters for the meterpreter sessions\nComm Timeout (Communication timeout) Retry Total Time Retry Wait Time You will have to experiment with the values until you reach the one that best suitable for the network environment I recommend to use Only if you already have attempted to change payloads and you still have issues\nThe command # set_timeouts -x 0 -c 100000 -w 2500 -t 100000 Flag and meaning # The -x stands for Expiration Timeout The -c stands for Communication Timeout The -w stands for Retry Wait Time the -t stands for Retry Total Time To view the results of newly configured settings run the following command # get_timeouts Reference: Metasploit Timeout control\n","date":"2 March 2024","permalink":"/posts/postsec/meterpreter_shell_timeout/","section":"Posts","summary":"A year ago while testing a https reverse meterpreter shell after a 15 or 30 minutes the meterpreter session would die.","title":"Meterpreter Session Time out"},{"content":"","date":null,"permalink":"/tags/powershell/","section":"Tags","summary":"","title":"Powershell"},{"content":"While training Red Teaming or Penetration Test hacking on plataforms like Hack the Box or previous offensive security training like OSCP or OSEP\nOne thing I noticed is during lateral movement through pivoting between the machines if I had to perform port scan enumeration on hosts located on different subnet/network utilizing proxychain+nmap or chisel+nmap, that was very painful and a nightmare\nNmap + Proxychains or Nmap + chisel did not work very well for me and for that reason i came up with something different and that was to leverage what native powershell has to offer, but for the offensive security side of it\nIf you have to scan large amount of ports even twerking the settings in nmap and proxychains will not give much gains compared to powershell. Below is a small snipped of powershell code that I developed and used multiple times during my training days that helped me and saved me a lot of time\nMy personal opnion on powershell is an awesome tool and one should master and be used as Read Teamer or Penetration Tester\nPowershell Port Scan Code # I used Runspace feature in powershell that allows to run multiple commands by creating new threads on existing process. The CreateRunSpacePool values 1,100 means mininum and maximum number of threads allowed to run at the same time. The AddScript is where you add the desired code to run\n$RunspacePool = [runspacefactory]::CreateRunspacePool(1,100) $RunspacePool.Open() $PowerShell = [powershell]::Create() $PowerShell.RunspacePool = $RunspacePool $PowerShell.AddScript({1..65535 | ForEach-Object { if((New-Object System.Net.Sockets.TcpClient).ConnectAsync(\u0026#34;YOUR_IP_HERE\u0026#34;,$_).wait(100)){write-host \u0026#34;Port $_ is opened\u0026#34;}}}) $Jobs = $PowerShell.BeginInvoke() If you want to go beyond you can improve the code snippet to run on multiple ips or creating a script that accept IP as an argument\n","date":"2 March 2024","permalink":"/posts/postsec/powershellscan/","section":"Posts","summary":"While training Red Teaming or Penetration Test hacking on plataforms like Hack the Box or previous offensive security training like OSCP or OSEP","title":"Powershell Port Scan"},{"content":"","date":null,"permalink":"/tags/programming/","section":"Tags","summary":"","title":"Programming"},{"content":"Welcome to my personal blog, where I document personal research, share insights, and contribute knowledge. With over 17 years in data protection, I\u0026rsquo;ve dedicated myself to helping companies safeguard their valuable information, handling diverse projects, and navigating disaster recovery scenarios.\nGradutated with a Bachelor of Computer Science and a specialization in Computer Networking. Possesses expertise in Data Protection, having designed, implemented, and supported some of the best Data Protection solutions currently available in the market, such as IBM Spectrum Protect, Veritas NetBackup, Commvault, and Dell Data Domain.\nDeveloped skills in Cybersecurity, enabling the assessment of IT infrastructure and identification of vulnerabilities. This knowledge is supported by acquiring respected certifications and undergoing cybersecurity trainings available in the market.\nYou can reach out to me on if you have any questions.\n","date":"1 March 2024","permalink":"/about/","section":"","summary":"Welcome to my personal blog, where I document personal research, share insights, and contribute knowledge.","title":"About"}]