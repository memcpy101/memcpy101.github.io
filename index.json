[{"content":"","date":null,"permalink":"/","section":"","summary":"","title":""},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":null,"permalink":"/tags/exploitdev/","section":"Tags","summary":"","title":"ExploitDev"},{"content":"Narly is a plugin that parses the image and identifies the binary protections mechanisms enabled such as DEP, ASLR, SafeSEH and GS.\nVery useful during exploit development.\nCan be downloaded here narly\nHow to use # Note.: after narly is compiled copy the narly.dll in windbg winext directory.\nExample:\nC:\\Program Files\\Debugging Tools for Windows (x86)\\winext Loading the pluing;\n.load narly Running narly in windbg:\n!nmod ","date":"9 March 2024","permalink":"/posts/postsec/narly_windbg/","section":"Posts","summary":"Narly is a plugin that parses the image and identifies the binary protections mechanisms enabled such as DEP, ASLR, SafeSEH and GS.","title":"Narly plugin for windbg"},{"content":"","date":null,"permalink":"/posts/postsec/","section":"Posts","summary":"","title":"Offensive Security Posts"},{"content":"","date":null,"permalink":"/categories/offensivesecurity/","section":"Categories","summary":"","title":"OffensiveSecurity"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/tags/reverseeng/","section":"Tags","summary":"","title":"ReverseEng"},{"content":"The Import Address Table stores information about the loaded modules imported by the current running processs.\nThe IAT is important during reverse engineering process to identify functions been used by the application and therefore understand better the application functionality and capabilities, its possible to understand the application behaviour by reviewing the IAT and looking for functions commonly used by malware.\nExploit developer perspective the IAT is important to identiy weak/vulnerable functions used by the application, after idenfiying the vulnerable function the exploit developer will attempt to reach the vulnerable function by manipulating the network packet or file format.\nBelow is an example of dependecy walker loaded with notepad.exe. We can see functions and modules used by notepad.exe We can see the notepad.exe uses kernel32 module and kernelbase as well and multiple functions from these modules. Thank you for reading.\n","date":"9 March 2024","permalink":"/posts/postsec/iat_win/","section":"Posts","summary":"The Import Address Table stores information about the loaded modules imported by the current running processs.","title":"The IAT (Import Address Table)"},{"content":"","date":null,"permalink":"/tags/windowsinternal/","section":"Tags","summary":"","title":"WindowsInternal"},{"content":"The rp++ is a ROP Gadget finder used by Exploit Developers to bypass DEP protection.\nOficial link rp++\nYou will need to compile.\nHow to use # Note.: -r means how many assenbly instructions, -f the path to the .dll or .exe to extract the gadgets and \u0026gt; to re-direct the results to a file. You can also exclude bad chars with bad chars.\nrp++.exe -r 5 -f \u0026lt;some.dll\u0026gt; \u0026gt; rop_some.dll with new version you can exclude bad characters\nrp++.exe --bad-bytes \u0026#39;\\x00\\x0a\u0026#39; -r 5 -f \u0026lt;some.dll\u0026gt; \u0026gt; rop_some.dll ","date":"9 March 2024","permalink":"/posts/postsec/rp_gadget/","section":"Posts","summary":"The rp++ is a ROP Gadget finder used by Exploit Developers to bypass DEP protection.","title":"The RP++ ROP Finder"},{"content":"The TEB (Thread Environment Block) # Just as PEB contains information about the processs, the TEB has information about the thread running in the processs. A process when created contains at least one thread that execute the desired code, a process can create N Threads.\nEach thread has its own TEB structure, the TEB is often used by exploit developers and malware developers to locate the Pointer to the PEB structure or information about running thread.\nThe TEB is accessed through FS segment register on 32-bit and GS on 64-bit Windows.\ntypedef struct _TEB { PVOID Reserved1[12]; PPEB ProcessEnvironmentBlock; PVOID Reserved2[399]; BYTE Reserved3[1952]; PVOID TlsSlots[64]; BYTE Reserved4[8]; PVOID Reserved5[26]; PVOID ReservedForOle; PVOID Reserved6[4]; PVOID TlsExpansionSlots; } TEB, *PTEB; References: TEB Microsoft TEB Wikipedia\n","date":"9 March 2024","permalink":"/posts/postsec/teb_struct/","section":"Posts","summary":"The TEB (Thread Environment Block) # Just as PEB contains information about the processs, the TEB has information about the thread running in the processs.","title":"The TEB Structure"},{"content":"The PEB (Process Environment Block) # The PEB is a data structure that store information about the running process and can be accessed through intel x86 [FS] register at offset 0x30h.\nThe structure contains useful information such as loaded modules on the running process commonly used during shellcode devolpment to resolve Win32 APIs functions.\nAnother useful information in the PEB structure is BeingDebugged that shows if the running process is been attached to the debugger or not.\nThis feature is often used by malware developers as an anti-debugging technique to increase the difficult of defenders such as Malware Analysts to analyse the malware dynamically using a debugger.\nIf the malware detects that is been debugged the malware could act as completed different to hide true purpose from analysts or delete itself on disk.\nThe Ldr data structure is also important which I will explain later on.\ntypedef struct _PEB { BYTE Reserved1[2]; BYTE BeingDebugged; BYTE Reserved2[1]; PVOID Reserved3[2]; PPEB_LDR_DATA Ldr; PRTL_USER_PROCESS_PARAMETERS ProcessParameters; PVOID Reserved4[3]; PVOID AtlThunkSListPtr; PVOID Reserved5; ULONG Reserved6; PVOID Reserved7; ULONG Reserved8; ULONG AtlThunkSListPtr32; PVOID Reserved9[45]; BYTE Reserved10[96]; PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine; BYTE Reserved11[128]; PVOID Reserved12[1]; ULONG SessionId; } PEB, *PPEB; Reference: Microsoft API PEB Reference\n","date":"9 March 2024","permalink":"/posts/postsec/peb/","section":"Posts","summary":"The PEB (Process Environment Block) # The PEB is a data structure that store information about the running process and can be accessed through intel x86 [FS] register at offset 0x30h.","title":"The PEB Structure"},{"content":"","date":null,"permalink":"/tags/metasploit/","section":"Tags","summary":"","title":"MetaSploit"},{"content":"","date":null,"permalink":"/tags/meterpreter/","section":"Tags","summary":"","title":"Meterpreter"},{"content":"A year ago while testing a https reverse meterpreter shell after a 15 or 30 minutes the meterpreter session would die. After investigating I ensured my reverse payload was not been dectected by the anti-virus, but the issue persisted\nI tried the TCP Meterpreter Shell and that resolved the issue, could be the related to network conditions affecting the HTTPS connection as a result the payload wasn\u0026rsquo;t a good fit for that environment\nLeason learned if a specific payload doesn\u0026rsquo;t work, try a different one\nBut this issue lead me to further investigate and see what could be on my control to improve the connection and I found I could set the following parameters for the meterpreter sessions\nComm Timeout (Communication timeout) Retry Total Time Retry Wait Time You will have to experiment with the values until you reach the one that best suitable for the network environment I recommend to use Only if you already have attempted to change payloads and you still have issues\nThe command # set_timeouts -x 0 -c 100000 -w 2500 -t 100000 Flag and meaning # The -x stands for Expiration Timeout The -c stands for Communication Timeout The -w stands for Retry Wait Time the -t stands for Retry Total Time To view the results of newly configured settings run the following command # get_timeouts Reference: Metasploit Timeout control\n","date":"2 March 2024","permalink":"/posts/postsec/meterpreter_shell_timeout/","section":"Posts","summary":"A year ago while testing a https reverse meterpreter shell after a 15 or 30 minutes the meterpreter session would die.","title":"Meterpreter Session Time out"},{"content":"","date":null,"permalink":"/tags/powershell/","section":"Tags","summary":"","title":"Powershell"},{"content":"While training Red Teaming or Penetration Test hacking on plataforms like Hack the Box or previous offensive security training like OSCP or OSEP\nOne thing I noticed is during lateral movement through pivoting between the machines if I had to perform port scan enumeration on hosts located on different subnet/network utilizing proxychain+nmap or chisel+nmap, that was very painful and a nightmare\nNmap + Proxychains or Nmap + chisel did not work very well for me and for that reason i came up with something different and that was to leverage what native powershell has to offer, but for the offensive security side of it\nIf you have to scan large amount of ports even twerking the settings in nmap and proxychains will not give much gains compared to powershell. Below is a small snipped of powershell code that I developed and used multiple times during my training days that helped me and saved me a lot of time\nMy personal opnion on powershell is an awesome tool and one should master and be used as Read Teamer or Penetration Tester\nPowershell Port Scan Code # I used Runspace feature in powershell that allows to run multiple commands by creating new threads on existing process. The CreateRunSpacePool values 1,100 means mininum and maximum number of threads allowed to run at the same time. The AddScript is where you add the desired code to run\n$RunspacePool = [runspacefactory]::CreateRunspacePool(1,100) $RunspacePool.Open() $PowerShell = [powershell]::Create() $PowerShell.RunspacePool = $RunspacePool $PowerShell.AddScript({1..65535 | ForEach-Object { if((New-Object System.Net.Sockets.TcpClient).ConnectAsync(\u0026#34;YOUR_IP_HERE\u0026#34;,$_).wait(100)){write-host \u0026#34;Port $_ is opened\u0026#34;}}}) $Jobs = $PowerShell.BeginInvoke() If you want to go beyond you can improve the code snippet to run on multiple ips or creating a script that accept IP as an argument\n","date":"2 March 2024","permalink":"/posts/postsec/powershellscan/","section":"Posts","summary":"While training Red Teaming or Penetration Test hacking on plataforms like Hack the Box or previous offensive security training like OSCP or OSEP","title":"Powershell Port Scan"},{"content":"","date":null,"permalink":"/tags/programming/","section":"Tags","summary":"","title":"Programming"},{"content":"Legal Disclaimer # All content of this blog related to CyberSecurity is for educational insights. If testing, ensure it\u0026rsquo;s on devices you own or are authorized to test. I disclaim responsibility for any misuse, emphasizing educational purposes. I do not endorse criminal activity, and engaging in such activities will lead to criminal charges\nAs a condition of your use of the Blog\u0026rsquo;s information, you warrant to pentesthacks.ca that you will not use this information for any purpose that is unlawful or that is prohibited by these terms, conditions, and notices. In addition, you are on notice, that continuing and/or using knowledge obtained on pentesthacks.ca outside your \u0026ldquo;own\u0026rdquo; test environment is considered malicious and is against the law. No content replication of any kind is allowed without express written permission.\nOpinions are my own and do not reflect those of my employer\n","date":"1 March 2024","permalink":"/disclaimer/","section":"","summary":"Legal Disclaimer # All content of this blog related to CyberSecurity is for educational insights.","title":"Disclaimer"},{"content":"Welcome to my personal blog, where I document research, share insights, and contribute knowledge. With over 17 years in data protection, I\u0026rsquo;ve dedicated myself to helping companies safeguard their valuable information, handling diverse projects, and navigating disaster recovery scenarios\nYou can reach out to me on if you have any questions.\nProfessional Qualification # Certified in Offensive Security # Red Team Operator Level 3 (APTLabs Hack the Box) Offensive Security Experienced Penetration Tester (OSEP) Offensive Security Web Expert (OSWE) Offensive Security Certified Professional (OSCP) BugBounty Hunter Certificate of Achievement OSCP OSWE OSEP Offensive Security Training Platform # My profile on BugBountyHunter and HacktheBox\nHackTheBox BugBountyHunter Endorsed by zseano BugBountyHunter In Progress Offensive/Denfense Security Training # Offensive Security Exploit Developer (OSED) Maldev Academy Ultimate Malware Reverse Engineering Bundle Experienced in the following Data Protection Solutions # IBM Spectrum Protect Veritas NetBackup Commvault Dell Data Domain Certified in the following Data Protection Softwares # IBM Certified Deployment Professional, Tivoli Storage Manager V7.1 (2015) IBM Certified Deployment Professional, Tivoli Storage Manager V6.3 (2012) IBM Certified Deployment Professional, Tivoli Storage Manager FastBack 6.1.1 (2011) IBM Certified Deployment Professional, Tivoli Storage Manager V6.2 (2010) IBM Certified Deployment Professional, Tivoli Storage Manager V6.1 (2009) IBM Certified Deployment Professional, Tivoli Storage Manager V5.5 (2009) IBM Certified Deployment Professional, Tivoli Storage Manager V5.4 (2008) Certified ITIL V3 Foundation (2011) ","date":"1 March 2024","permalink":"/about/","section":"","summary":"Welcome to my personal blog, where I document research, share insights, and contribute knowledge.","title":"About"}]